name: lint

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
        description: "From which folder this pipeline executes"

env:
  #UV_FROZEN: "true"
  WORKDIR: ${{ inputs.working-directory == '' && '.' || inputs.working-directory }}

  # This env var allows us to get inline annotations when ruff has complaints.
  RUFF_OUTPUT_FORMAT: github

jobs:
  build:
    name: "make lint"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Only lint on the min and max supported Python versions.
        # It's extremely unlikely that there's a lint issue on any version in between
        # that doesn't show up on the min or max versions.
        #
        # GitHub rate-limits how many jobs can be running at any one time.
        # Starting new jobs is also relatively slow,
        # so linting on fewer versions makes CI faster.
        python-version:
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }} + uv
        uses: "./.github/actions/uv_setup"
        with:
          python-version: ${{ matrix.python-version }}
      
      # START DEBUG
      - name: Debug pyproject.toml and environment
        working-directory: ${{ inputs.working-directory }}
        run: |
          echo "=== Current working directory ==="
          pwd
          echo ""
          echo "=== Directory contents ==="
          ls -la
          echo ""
          echo "=== pyproject.toml exists? ==="
          test -f pyproject.toml && echo "✅ pyproject.toml found" || echo "❌ pyproject.toml NOT found"
          echo ""
          echo "=== pyproject.toml content ==="
          cat pyproject.toml
          echo ""
          echo "=== UV version ==="
          uv --version
          echo ""
          echo "=== Python version ==="
          python --version
          echo ""
          echo "=== Check TOML syntax ==="
          python -c "
          import tomllib
          try:
            with open('pyproject.toml', 'rb') as f:
              data = tomllib.load(f)
              print('✅ TOML syntax is valid')
              print('Available top-level keys:', list(data.keys()))
              if 'dependency-groups' in data:
                print('✅ dependency-groups found')
                print('Available groups:', list(data['dependency-groups'].keys()))
              else:
                print('❌ dependency-groups NOT found')
                if 'project' in data and 'optional-dependencies' in data['project']:
                    print('⚠️  Found old optional-dependencies format')
          except Exception as e:
              print('❌ TOML parsing failed:', e)
          "
      # END DEBUG
        

      - name: Install dependencies
        # Also installs dev/lint/test/typing dependencies, to ensure we have
        # type hints for as many of our libraries as possible.
        # This helps catch errors that require dependencies to be spotted, for example:
        # https://github.com/langchain-ai/langchain/pull/10249/files#diff-935185cd488d015f026dcd9e19616ff62863e8cde8c0bee70318d3ccbca98341
        #
        # If you change this configuration, make sure to change the `cache-key`
        # in the `poetry_setup` action above to stop using the old cache.
        # It doesn't matter how you change it, any change will cause a cache-bust.
        working-directory: ${{ inputs.working-directory }}
        run: |
          #uv sync --group lint --group typing
          uv sync --all-groups --verbose

      - name: Analysing the code with our lint
        working-directory: ${{ inputs.working-directory }}
        run: |
          make lint_package

      - name: Install unit+integration test dependencies
        working-directory: ${{ inputs.working-directory }}
        run: |
          uv sync --inexact --group test --group test_integration

      - name: Analysing the code with our lint
        working-directory: ${{ inputs.working-directory }}
        run: |
          make lint_tests
